@startuml
    namespace game.components {

        class Message [[Message.html]] {
            +start(): void
            +gameStart(): void
            +update(float): void
            +interact(): void
        }

        class SpriteRenderer [[SpriteRenderer.html]] {
            +start(): void
            +update(float): void
            +editorUpdate(float): void
            +imgui(): void
            +getColor(): Vector4f
            +getTexture(): Texture
            +getTexCoords(): Vector2f[]
            +setColor(Vector4f): void
            +isDirty(): boolean
            +setDirty(): void
            +setClean(): void
            +setTexture(Texture): void
        }

        class GameCamera [[GameCamera.html]] {
            +GameCamera(Camera)
            +start(): void
            +update(float): void
            +read(String, float): void
        }

        class InteraktiveGizmo [[InteraktiveGizmo.html]] {
            +start(): void
            +update(float): void
            +setInactive(): void
            +setActive(GameObject): void
        }

        class PositionAbsolut [[PositionAbsolut.html]] {
            +absolutPos: Vector2f
            +update(float): void
        }

        class MouseControls [[MouseControls.html]] {
            +pickupObject(GameObject): void
            +place(): void
            +editorUpdate(float): void
        }

        class Sprite [[Sprite.html]] {
            +getTexture(): Texture
            +getTexCoords(): Vector2f[]
            +setTexture(Texture): void
            +setTexCoords(Vector2f[]): void
            +getWidth(): float
            +setWidth(float): void
            +getHeight(): float
            +setHeight(float): void
            +getTexId(): int
        }

        class AnimationState [[AnimationState.html]] {
            +title: String
            +doesLoop: boolean
            +addFrame(Sprite, float): void
            +setLoop(boolean): void
            +update(float): void
            +refreshTextures(): void
        }

        class ComponentDeserializer [[ComponentDeserializer.html]] {
            +deserialize(JsonElement, Type, JsonDeserializationContext): Component
            +serialize(Component, Type, JsonSerializationContext): JsonElement
        }

        abstract class Component [[Component.html]] {
            +gameObject: GameObject
            +start(): void
            +gameStart(): void
            +update(float): void
            +imgui(): void
            +generateID(): void
            +getGameObject(): GameObject
            +setGameObject(GameObject): void
            {static} +getID_COUNTER(): int
            {static} +setID_COUNTER(int): void
            +getUid(): int
            {static} +init(int): void
            +destroy(): void
            +editorUpdate(float): void
        }

        class KeyControls [[KeyControls.html]] {
            +editorUpdate(float): void
            {static} +rotateGOs90Deg(List<GameObject>): void
        }

        class Spritesheet [[Spritesheet.html]] {
            +Spritesheet(Texture, int, int, int, int)
            +getSprite(int): Sprite
            +size(): int
        }

        class StateMachine [[StateMachine.html]] {
            +stateTransfers: HashMap<StateTrigger, String>
            +refreshTexture(): void
            +addState(String, String, String): void
            +addState(AnimationState): void
            +setDefaultState(String): void
            +trigger(String): void
            +start(): void
            +update(float): void
            +editorUpdate(float): void
            +imgui(): void
        }

        class PlayerController_two [[PlayerController_two.html]] {
            +walkSpeed: float
            +slowDownForc: float
            +terminalVelocity: Vector2f
            +start(): void
            +gameStart(): void
            +update(float): void
        }

        class GridLines [[GridLines.html]] {
            +editorUpdate(float): void
        }

        class PlayerController [[PlayerController.html]] {
            +walkSpeed: float
            +slowDownForc: float
            +terminalVelocity: Vector2f
            +start(): void
            +update(float): void
        }

        abstract class Interaktive [[Interaktive.html]] {
            {abstract} +interact(GameObject): void
            +setInteractive(boolean): void
            +getInteractive(): boolean
            +update(float): void
            +editorUpdate(float): void
        }

        class FontRenderer [[FontRenderer.html]] {
            +start(): void
            +update(float): void
        }

        class EditorCamera [[EditorCamera.html]] {
            +EditorCamera(Camera)
            +editorUpdate(float): void
        }

        class Item [[Item.html]] {
            +gameStart(): void
            +show(): void
            +hide(): void
        }

        class NonPickable [[NonPickable.html]]

        class Rigidbody [[Rigidbody.html]] {
            +globalCenter: Vector2f
            +dimension: Vector2f
            +Rigidbody(Vector2f, Vector2f)
            +collisionBox(GameObject): boolean
            +update(float): void
            +editorUpdate(float): void
        }

        Component <|-- Message
        Component <|-- SpriteRenderer
        SpriteRenderer --> Sprite: sprite
        Component <|-- GameCamera
        GameCamera --> game.components.enums.CameraModi: camMode
        Component <|-- InteraktiveGizmo
        Component <|-- PositionAbsolut
        Component <|-- MouseControls
        Component <|-- AnimationState
        AnimationState --> "*" Frame: animationFrames
        AnimationState --> Sprite: currentSprite
        com.google.gson.JsonSerializer <|.. ComponentDeserializer
        com.google.gson.JsonDeserializer <|.. ComponentDeserializer
        Component <|-- KeyControls
        Spritesheet --> "*" Sprite: sprites
        Component <|-- StateMachine
        Component <|-- PlayerController_two
        Component <|-- GridLines
        Component <|-- PlayerController
        Component <|-- Interaktive
        Component <|-- FontRenderer
        Component <|-- EditorCamera
        Component <|-- Item
        Component <|-- NonPickable
        Component <|-- Rigidbody
    }

    namespace com.google.gson {
        interface JsonSerializer<T> {
            {abstract} +serialize(T, Type, JsonSerializationContext): JsonElement
        }
        interface JsonDeserializer<T> {
            {abstract} +deserialize(JsonElement, Type, JsonDeserializationContext): T
        }
    }

    center footer UMLDoclet 2.1.0, PlantUML %version()
@enduml
