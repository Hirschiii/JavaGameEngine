@startuml
    namespace game.engine {

        class MouseListener [[MouseListener.html]] {
            {static} +clear(): void
            {static} +get(): MouseListener
            {static} +mousePosCallback(long, double, double): void
            {static} +mouseButtonCallback(long, int, int, int): void
            {static} +mouseScrollCallback(long, double, double): void
            {static} +endFrame(): void
            {static} +getX(): float
            {static} +getY(): float
            {static} +getDx(): float
            {static} +getInstance(): MouseListener
            {static} +setInstance(MouseListener): void
            +setScrollX(double): void
            +setScrollY(double): void
            +getxPos(): double
            +setxPos(double): void
            +getyPos(): double
            +setyPos(double): void
            +getLastY(): double
            +setLastY(double): void
            +getLastX(): double
            +setLastX(double): void
            +getMouseButtonPressed(): boolean[]
            +setMouseButtonPressed(boolean[]): void
            +setDragging(boolean): void
            {static} +getDy(): float
            {static} +getScrollX(): float
            {static} +getScrollY(): float
            {static} +isDragging(): boolean
            {static} +mouseButtonDown(int): boolean
            {static} +setGameViewportPos(Vector2f): void
            {static} +setGameViewportSize(Vector2f): void
            {static} +getScreenX(): float
            {static} +getScreenY(): float
            {static} +getScreen(): Vector2f
            {static} +getWorldDx(): float
            {static} +getWorldDy(): float
            {static} +getWorldX(): float
            {static} +getWorldY(): float
            {static} +getWorld(): Vector2f
            {static} +screenToWorld(Vector2f): Vector2f
            {static} +worldToScreen(Vector2f): Vector2f
        }

        class Window [[Window.html]] {
            +r: float
            +g: float
            +b: float
            +a: float
            {static} +get(): Window
            {static} +changeScene(SceneInitializer): void
            {static} +getWidth(): int
            {static} +getHeight(): int
            {static} +setWidth(int): void
            {static} +setHeight(int): void
            {static} +getWindow(): Window
            {static} +setWindow(Window): void
            {static} +getScene(): Scene
            {static} +setCurrenScene(Scene): void
            +run(): void
            +init(): void
            +loop(): void
            +getTitle(): String
            +getGlfwWindow(): long
            +isFadeToBlack(): boolean
            +setFadeToBlack(boolean): void
            {static} +getImguiLayer(): ImGuiLayer
            {static} +getFramebuffer(): Framebuffer
            {static} +getCurrenScene(): Scene
            {static} +getTargetAspectRatio(): float
            {static} +getCurrentTime(): float
            +onNotify(GameObject, Event): void
        }

        class Transform [[Transform.html]] {
            +position: Vector2f
            +scale: Vector2f
            +rotation: float
            +zIndex: int
            +Transform()
            +Transform(Vector2f)
            +Transform(Vector2f, Vector2f)
            +init(Vector2f, Vector2f): void
            +copy(): Transform
            +imgui(): void
            +copy(Transform): void
            +getPosition(): Vector2f
            +getScale(): Vector2f
            +getRotation(): float
            +getzIndex(): int
        }

        class KeyListener [[KeyListener.html]] {
            {static} +get(): KeyListener
            {static} +keyCallback(long, int, int, int, int): void
            {static} +isKeyPressed(int): boolean
            {static} +endFrame(): void
            {static} +keyBeginPress(int): boolean
        }

        class Prefabs [[Prefabs.html]] {
            {static} +generateSpriteObject(Sprite, float, float): GameObject
            {static} +generatePlayer(): GameObject
            {static} +generateStreet(): GameObject
            {static} +generateColorChangingStreet(Sprite): GameObject
            {static} +generateCustemInteractive(Sprite): GameObject
        }

        class ImGuiLayer [[ImGuiLayer.html]] {
            +ImGuiLayer(long, PickingTexture)
            +initImGui(): void
            +update(float, Scene): void
            +getPropertiesWindow(): PropertiesWindow
            +getGameViewWindow(): GameViewWindow
        }

        class GameObject [[GameObject.html]] {
            +name: String
            +GameObject(String)
            {static} +init(int): void
            {static} +getID_COUNTER(): int
            {static} +setID_COUNTER(int): void
            +getComponent(Class<T extends Component>): T extends Component
            +removeComponent(Class<T extends Component>): void
            +addComponent(Component): void
            +update(float): void
            +start(): void
            +imgui(): void
            +getName(): String
            +setName(String): void
            +getComponents(): List<Component>
            +setComponents(List<Component>): void
            +getUid(): int
            +setUid(int): void
            +getAllComponents(): List<Component>
            +setActiveGameObject(boolean): void
            +getIsActiveGameObject(): boolean
            +setNoSerialize(): void
            +doSerialization(): boolean
            +isDead(): boolean
            +destroy(): void
            +editorUpdate(float): void
            +copy(): GameObject
        }

        class Camera [[Camera.html]] {
            +position: Vector2f
            +zoom: float
            +Camera(Vector2f)
            +adjustProjection(): void
            +getViewMatrix(): Matrix4f
            +getProjectionMatrix(): Matrix4f
            +getProjectMatrix(): Matrix4f
            +setProjectMatrix(Matrix4f): void
            +setViewMatrix(Matrix4f): void
            +getInverseProjection(): Matrix4f
            +setInverseProjection(Matrix4f): void
            +getInverseView(): Matrix4f
            +setInverseView(Matrix4f): void
            +getPosition(): Vector2f
            +setPosition(Vector2f): void
            +getProjectionHeight(): float
            +setProjectionHeight(float): void
            +getZoom(): float
            +setZoom(float): void
            +addZoom(float): void
            +getAspectRation(): float
            +setAspectRation(float): void
            +getProjectionSize(): Vector2f
            +setProjectionSize(Vector2f): void
        }

        class GameObjectDeserializer [[GameObjectDeserializer.html]] {
            +deserialize(JsonElement, Type, JsonDeserializationContext): GameObject
        }

        game.observers.Observer <|.. Window
        Window --> ImGuiLayer: imguiLayer
        game.components.Component <|-- Transform
        GameObject --> Transform: transform
        com.google.gson.JsonDeserializer <|.. GameObjectDeserializer
    }

    namespace game.observers {
        interface Observer [[../observers/Observer.html]] {
            {abstract} +onNotify(GameObject, Event): void
        }
    }

    namespace game.components {
        abstract class Component [[../components/Component.html]] {
            +gameObject: GameObject
        }
    }

    namespace com.google.gson {
        interface JsonDeserializer<T> {
            {abstract} +deserialize(JsonElement, Type, JsonDeserializationContext): T
        }
    }

    center footer UMLDoclet 2.1.0, PlantUML %version()
@enduml
