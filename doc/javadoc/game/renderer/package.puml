@startuml
    namespace game.renderer {

        class Texture [[Texture.html]] {
            +Texture()
            +Texture(int, int)
            +init(String): void
            +bind(): void
            +unbind(): void
            +getWidth(): int
            +getHeight(): int
            +getFilepath(): String
            +setFilepath(String): void
            +getTexID(): int
            +setTexID(int): void
            +setWidth(int): void
            +setHeight(int): void
        }

        class Line2D [[Line2D.html]] {
            +Line2D(Vector2f, Vector2f, Vector3f, int)
            +beginFrame(): int
            +getFrom(): Vector2f
            +setFrom(Vector2f): void
            +getTo(): Vector2f
            +setTo(Vector2f): void
            +getColor(): Vector3f
            +setColor(Vector3f): void
        }

        class Shader [[Shader.html]] {
            +Shader(String)
            +compile(): void
            +use(): void
            +detach(): void
            +uploadMat4f(String, Matrix4f): void
            +uploadMat3f(String, Matrix3f): void
            +uploadVec4f(String, Vector4f): void
            +uploadVec3f(String, Vector3f): void
            +uploadVec2f(String, Vector2f): void
            +uploadFloat(String, float): void
            +uploadInt(String, int): void
            +uploadTexture(String, int): void
            +uploadIntArray(String, int[]): void
        }

        class PickingTexture [[PickingTexture.html]] {
            +PickingTexture(int, int)
            +init(int, int): boolean
            +enableWriting(): void
            +disableWriting(): void
            +readPixel(int, int): int
            +readPixels(Vector2i, Vector2i): float[]
        }

        class Framebuffer [[Framebuffer.html]] {
            +Framebuffer(int, int)
            +readPixel(int, int): float[]
            +bind(): void
            +unbind(): void
            +getFboID(): int
            +getTextureID(): int
        }

        class DebugDraw [[DebugDraw.html]] {
            {static} +start(): void
            {static} +beginFrame(): void
            {static} +draw(): void
            {static} +addLine2D(Vector2f, Vector2f): void
            {static} +addLine2D(Vector2f, Vector2f, Vector3f): void
            {static} +addLine2D(Vector2f, Vector2f, Vector3f, int): void
        }

        class Renderer [[Renderer.html]] {
            +add(GameObject): void
            {static} +bindShader(Shader): void
            {static} +getBoundShader(): Shader
            +render(): void
        }

        class RenderBatch [[RenderBatch.html]] {
            +RenderBatch(int, int)
            +start(): void
            +addSprite(SpriteRenderer): void
            +render(): void
            +hasRoom(): boolean
            +hasTextureRoom(): boolean
            +hasTexture(Texture): boolean
            +zIndex(): int
            +compareTo(RenderBatch): int
        }

        Framebuffer --> Texture: texture
        java.lang.Comparable <|.. RenderBatch
    }

    namespace java.lang {
        interface Comparable<T> {
            {abstract} +compareTo(T): int
        }
    }

    center footer UMLDoclet 2.1.0, PlantUML %version()
@enduml
